@startuml ClassDiagramEcommerceKeys_Unificado

' ###### ENTIDADES PRINCIPAIS ######
class Usuario {
  + id: string
  + nome: string
  + email: string
  + senha: string (hash)
  + dataCadastro: DateTime
  + status: enum(ativo, inativo)
  + tipo: enum(cliente, admin)
  --
  + login(): boolean
  + alterarSenha(): void
}

class Cliente {
  + cpf: string
  + pedidos: Pedido[]
  + biblioteca: BibliotecaItem[]
  + carrinhoAtual: Carrinho
  --
  + verificarPosseJogo(): boolean
  + finalizarCompra(): Pedido
}

class Administrador {
  + nivelAcesso: enum(basico, total)
  --
  + banirUsuario(): void
  + gerarRelatorio(): string
}

class Jogo {
  + id: string
  + nome: string
  + descricao: string
  + precoBase: float
  + plataformas: string[]
  + generos: string[]
  + lancamento: Date
  + desenvolvedora: string
  + imagemUrl: string
  --
  + calcularMediaAvaliacoes(): float
}

class Key {
  + id: string
  + codigo: string (criptografado)
  + status: enum(disponivel, vendida, resgatada)
  + dataAquisicao: DateTime
  + lote: string
  --
  + validarKey(): boolean
}

' ###### ENTIDADES DE NEGÃ“CIO ######
class Pedido {
  + id: string
  + data: DateTime
  + status: enum(pendente, pago, cancelado)
  + total: float
  + metodoPagamento: string
  --
  + calcularTotal(): float
  + cancelarPedido(): void
  + gerarNotaFiscal(): string
}

class ItemPedido {
  + keyId: string
  + precoUnitario: float
  + desconto: float
}

class Carrinho {
  + id: string
  + itens: ItemCarrinho[]
  + dataAtualizacao: DateTime
  + cupomAplicado: string
  --
  + adicionarItem(): void
  + removerItem(): void
  + calcularSubtotal(): float
  + converterParaPedido(): Pedido
}

class ItemCarrinho {
  + quantidade: int
  + precoUnitario: float
}

class Interacao {
  + id: string
  + tipo: enum(avaliacao, comentario)
  + titulo: string
  + texto: string
  + nota: float (0.0-10.0)
  + dataPublicacao: DateTime
  + dataEdicao: DateTime
  + votosPositivos: int
  + votosNegativos: int
  + comprovadoCompra: boolean
  + horasJogadas: int
  + plataforma: string
  + versaoJogo: string
  + verificada: boolean
  + editado: boolean
  --
  + editar(novoTitulo: string, novoTexto: string): void
  + votar(positivo: boolean): void
  + reportar(motivo: string): void
  + calcularTaxaAproveitamento(): float
  + marcarComoVerificada(): void
  + responder(texto: string): Interacao
  + ordenarRespostas(por: string): void
}

' ###### RELACIONAMENTOS ATUALIZADOS ######
Usuario <|-- Cliente
Usuario <|-- Administrador

Cliente "1" -- "0..*" Pedido
Cliente "1" -- "1" Carrinho
Carrinho "1" -- "1" Pedido : <<converte em>>
Pedido "1" -- "1..*" ItemPedido
ItemPedido "1" -- "1" Key

Cliente "1" -- "0..*" Interacao
Jogo "1" -- "0..*" Key
Jogo "1" -- "0..*" Interacao

Interacao "0..*" -- "0..*" Interacao : respostas >

Carrinho "1" -- "1..*" ItemCarrinho
ItemCarrinho "1" -- "1" Jogo

Administrador "1" -- "0..*" Interacao : modera >

' ###### ENUMS ######
enum StatusKey {
  DISPONIVEL
  VENDIDA
  RESGATADA
}

enum StatusPedido {
  PENDENTE
  PAGO
  CANCELADO
}

enum TipoUsuario {
  CLIENTE
  ADMIN
}

enum TipoInteracao {
  AVALIACAO
  COMENTARIO
}

@enduml
